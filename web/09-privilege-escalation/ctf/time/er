SUDO(8)                                BSD System Manager's Manual                               SUDO(8)

NNAAMMEE
     ssuuddoo, ssuuddooeeddiitt — execute a command as another user

SSYYNNOOPPSSIISS
     ssuuddoo --hh | --KK | --kk | --VV
     ssuuddoo --vv [--AABBkkNNnnSS] [--gg _g_r_o_u_p] [--hh _h_o_s_t] [--pp _p_r_o_m_p_t] [--uu _u_s_e_r]
     ssuuddoo --ll [--AABBkkNNnnSS] [--gg _g_r_o_u_p] [--hh _h_o_s_t] [--pp _p_r_o_m_p_t] [--UU _u_s_e_r] [--uu _u_s_e_r] [_c_o_m_m_a_n_d [_a_r_g _._._.]]
     ssuuddoo [--AABBbbEEHHnnPPSS] [--CC _n_u_m] [--DD _d_i_r_e_c_t_o_r_y] [--gg _g_r_o_u_p] [--hh _h_o_s_t] [--pp _p_r_o_m_p_t] [--RR _d_i_r_e_c_t_o_r_y] [--rr _r_o_l_e]
          [--tt _t_y_p_e] [--TT _t_i_m_e_o_u_t] [--uu _u_s_e_r] [_V_A_R=_v_a_l_u_e] [--ii | --ss] [_c_o_m_m_a_n_d [_a_r_g _._._.]]
     ssuuddooeeddiitt [--AABBkkNNnnSS] [--CC _n_u_m] [--DD _d_i_r_e_c_t_o_r_y] [--gg _g_r_o_u_p] [--hh _h_o_s_t] [--pp _p_r_o_m_p_t] [--RR _d_i_r_e_c_t_o_r_y]
          [--rr _r_o_l_e] [--tt _t_y_p_e] [--TT _t_i_m_e_o_u_t] [--uu _u_s_e_r] _f_i_l_e _._._.

DDEESSCCRRIIPPTTIIOONN
     ssuuddoo allows a permitted user to execute a _c_o_m_m_a_n_d as the superuser or another user, as specified by
     the security policy.  The invoking user's real (_n_o_t effective) user-ID is used to determine the
     user name with which to query the security policy.

     ssuuddoo supports a plugin architecture for security policies, auditing, and input/output logging.
     Third parties can develop and distribute their own plugins to work seamlessly with the ssuuddoo front-
     end.  The default security policy is _s_u_d_o_e_r_s, which is configured via the file _/_e_t_c_/_s_u_d_o_e_r_s, or via
     LDAP.  See the _P_l_u_g_i_n_s section for more information.

     The security policy determines what privileges, if any, a user has to run ssuuddoo.  The policy may re‐
     quire that users authenticate themselves with a password or another authentication mechanism.  If
     authentication is required, ssuuddoo will exit if the user's password is not entered within a config‐
     urable time limit.  This limit is policy-specific; the default password prompt timeout for the
     _s_u_d_o_e_r_s security policy is 0 minutes.

     Security policies may support credential caching to allow the user to run ssuuddoo again for a period
     of time without requiring authentication.  By default, the _s_u_d_o_e_r_s policy caches credentials on a
     per-terminal basis for 15 minutes.  See the _t_i_m_e_s_t_a_m_p___t_y_p_e and _t_i_m_e_s_t_a_m_p___t_i_m_e_o_u_t options in
     sudoers(5) for more information.  By running ssuuddoo with the --vv option, a user can update the cached
     credentials without running a _c_o_m_m_a_n_d.

     On systems where ssuuddoo is the primary method of gaining superuser privileges, it is imperative to
     avoid syntax errors in the security policy configuration files.  For the default security policy,
     sudoers(5), changes to the configuration files should be made using the visudo(8) utility which
     will ensure that no syntax errors are introduced.

     When invoked as ssuuddooeeddiitt, the --ee option (described below), is implied.

     Security policies and audit plugins may log successful and failed attempts to run ssuuddoo.  If an I/O
     plugin is configured, the running _c_o_m_m_a_n_d's input and output may be logged as well.

     The options are as follows:

     --AA, ----aasskkppaassss
             Normally, if ssuuddoo requires a password, it will read it from the user's terminal.  If the --AA
             (_a_s_k_p_a_s_s) option is specified, a (possibly graphical) helper program is executed to read
             the user's password and output the password to the standard output.  If the SUDO_ASKPASS
             environment variable is set, it specifies the path to the helper program.  Otherwise, if
             sudo.conf(5) contains a line specifying the askpass program, that value will be used.  For
             example:

                 # Path to askpass helper program
                 Path askpass /usr/X11R6/bin/ssh-askpass

             If no askpass program is available, ssuuddoo will exit with an error.

     --BB, ----bbeellll
             Ring the bell as part of the password prompt when a terminal is present.  This option has
             no effect if an askpass program is used.

     --bb, ----bbaacckkggrroouunndd
             Run the given _c_o_m_m_a_n_d in the background.  It is not possible to use shell job control to
             manipulate background processes started by ssuuddoo.  Most interactive _c_o_m_m_a_n_ds will fail to
             work properly in background mode.

     --CC _n_u_m, ----cclloossee--ffrroomm=_n_u_m
             Close all file descriptors greater than or equal to _n_u_m before executing a _c_o_m_m_a_n_d.  Values
             less than three are not permitted.  By default, ssuuddoo will close all open file descriptors
             other than standard input, standard output, and standard error when executing a _c_o_m_m_a_n_d.
             The security policy may restrict the user's ability to use this option.  The _s_u_d_o_e_r_s policy
             only permits use of the --CC option when the administrator has enabled the _c_l_o_s_e_f_r_o_m___o_v_e_r_r_i_d_e
             option.

     --DD _d_i_r_e_c_t_o_r_y, ----cchhddiirr=_d_i_r_e_c_t_o_r_y
             Run the _c_o_m_m_a_n_d in the specified _d_i_r_e_c_t_o_r_y instead of the current working directory.  The
             security policy may return an error if the user does not have permission to specify the
             working directory.

     --EE, ----pprreesseerrvvee--eennvv
             Indicates to the security policy that the user wishes to preserve their existing environ‐
             ment variables.  The security policy may return an error if the user does not have permis‐
             sion to preserve the environment.

     ----pprreesseerrvvee--eennvv==lliisstt
             Indicates to the security policy that the user wishes to add the comma-separated list of
             environment variables to those preserved from the user's environment.  The security policy
             may return an error if the user does not have permission to preserve the environment.  This
             option may be specified multiple times.

     --ee, ----eeddiitt
             Edit one or more _f_i_l_es instead of running a _c_o_m_m_a_n_d.  In lieu of a path name, the string
             "sudoedit" is used when consulting the security policy.  If the user is authorized by the
             policy, the following steps are taken:

             1.   Temporary copies are made of the files to be edited with the owner set to the invoking
                  user.

             2.   The editor specified by the policy is run to edit the temporary files.  The _s_u_d_o_e_r_s
                  policy uses the SUDO_EDITOR, VISUAL and EDITOR environment variables (in that order).
                  If none of SUDO_EDITOR, VISUAL or EDITOR are set, the first program listed in the
                  _e_d_i_t_o_r sudoers(5) option is used.

             3.   If they have been modified, the temporary files are copied back to their original lo‐
                  cation and the temporary versions are removed.

             To help prevent the editing of unauthorized files, the following restrictions are enforced
             unless explicitly allowed by the security policy:

              ••  Symbolic links may not be edited (version 1.8.15 and higher).

              ••  Symbolic links along the path to be edited are not followed when the parent directory
                 is writable by the invoking user unless that user is root (version 1.8.16 and higher).

              ••  Files located in a directory that is writable by the invoking user may not be edited
                 unless that user is root (version 1.8.16 and higher).

             Users are never allowed to edit device special files.

             If the specified file does not exist, it will be created.  Unlike most _c_o_m_m_a_n_ds run by
             _s_u_d_o, the editor is run with the invoking user's environment unmodified.  If the temporary
             file becomes empty after editing, the user will be prompted before it is installed.  If,
             for some reason, ssuuddoo is unable to update a file with its edited version, the user will re‐
             ceive a warning and the edited copy will remain in a temporary file.

     --gg _g_r_o_u_p, ----ggrroouupp=_g_r_o_u_p
             Run the _c_o_m_m_a_n_d with the primary group set to _g_r_o_u_p instead of the primary group specified
             by the target user's password database entry.  The _g_r_o_u_p may be either a group name or a
             numeric group-ID (GID) prefixed with the ‘#’ character (e.g., ‘#0’ for GID 0).  When run‐
             ning a _c_o_m_m_a_n_d as a GID, many shells require that the ‘#’ be escaped with a backslash
             (‘\’).  If no --uu option is specified, the _c_o_m_m_a_n_d will be run as the invoking user.  In ei‐
             ther case, the primary group will be set to _g_r_o_u_p.  The _s_u_d_o_e_r_s policy permits any of the
             target user's groups to be specified via the --gg option as long as the --PP option is not in
             use.

     --HH, ----sseett--hhoommee
             Request that the security policy set the HOME environment variable to the home directory
             specified by the target user's password database entry.  Depending on the policy, this may
             be the default behavior.

     --hh, ----hheellpp
             Display a short help message to the standard output and exit.

     --hh _h_o_s_t, ----hhoosstt=_h_o_s_t
             Run the _c_o_m_m_a_n_d on the specified _h_o_s_t if the security policy plugin supports remote
             _c_o_m_m_a_n_ds. The _s_u_d_o_e_r_s plugin does not currently support running remote _c_o_m_m_a_n_ds. This may
             also be used in conjunction with the --ll option to list a user's privileges for the remote
             host.

     --ii, ----llooggiinn
             Run the shell specified by the target user's password database entry as a login shell.
             This means that login-specific resource files such as _._p_r_o_f_i_l_e, _._b_a_s_h___p_r_o_f_i_l_e, or _._l_o_g_i_n
             will be read by the shell.  If a _c_o_m_m_a_n_d is specified, it is passed to the shell as a sim‐
             ple _c_o_m_m_a_n_d using the --cc option.  The _c_o_m_m_a_n_d and any _a_r_gs are concatenated, separated by
             spaces, after escaping each character (including white space) with a backslash (‘\’) except
             for alphanumerics, underscores, hyphens, and dollar signs.  If no _c_o_m_m_a_n_d is specified, an
             interactive shell is executed.  ssuuddoo attempts to change to that user's home directory be‐
             fore running the shell.  The _c_o_m_m_a_n_d is run with an environment similar to the one a user
             would receive at log in.  Most shells behave differently when a _c_o_m_m_a_n_d is specified as
             compared to an interactive session; consult the shell's manual for details.  The _C_o_m_m_a_n_d
             _e_n_v_i_r_o_n_m_e_n_t section in the sudoers(5) manual documents how the --ii option affects the envi‐
             ronment in which a _c_o_m_m_a_n_d is run when the _s_u_d_o_e_r_s policy is in use.

     --KK, ----rreemmoovvee--ttiimmeessttaammpp
             Similar to the --kk option, except that it removes every cached credential for the user, re‐
             gardless of the terminal or parent process ID.  The next time ssuuddoo is run, a password must
             be entered if the security policy requires authentication.  It is not possible to use the
             --KK option in conjunction with a _c_o_m_m_a_n_d or other option.  This option does not require a
             password.  Not all security policies support credential caching.

     --kk, ----rreesseett--ttiimmeessttaammpp
             When used without a _c_o_m_m_a_n_d, invalidates the user's cached credentials for the current ses‐
             sion.  The next time ssuuddoo is run in the session, a password must be entered if the security
             policy requires authentication.  By default, the ssuuddooeerrss policy uses a separate record in
             the credential cache for each terminal (or parent process ID if no terminal is present).
             This prevents the --kk option from interfering with ssuuddoo commands run in a different terminal
             session.  See the _t_i_m_e_s_t_a_m_p___t_y_p_e option in sudoers(5) for more information.  This option
             does not require a password, and was added to allow a user to revoke ssuuddoo permissions from
             a _._l_o_g_o_u_t file.

             When used in conjunction with a _c_o_m_m_a_n_d or an option that may require a password, this op‐
             tion will cause ssuuddoo to ignore the user's cached credentials.  As a result, ssuuddoo will
             prompt for a password (if one is required by the security policy) and will not update the
             user's cached credentials.

             Not all security policies support credential caching.

     --ll, ----lliisstt
             If no _c_o_m_m_a_n_d is specified, list the privileges for the invoking user (or the _u_s_e_r speci‐
             fied by the --UU option) on the current host.  A longer list format is used if this option is
             specified multiple times and the security policy supports a verbose output format.

             If a _c_o_m_m_a_n_d is specified and is permitted by the security policy, the fully-qualified path
             to the _c_o_m_m_a_n_d is displayed along with any _a_r_gs. If a _c_o_m_m_a_n_d is specified but not allowed
             by the policy, ssuuddoo will exit with a status value of 1.

     --NN, ----nnoo--uuppddaattee
             Do not update the user's cached credentials, even if the user successfully authenticates.
             Unlike the --kk flag, existing cached credentials are used if they are valid.  To detect when
             the user's cached credentials are valid (or when no authentication is required), the fol‐
             lowing can be used:
                   sudo -Nnv

             Not all security policies support credential caching.

     --nn, ----nnoonn--iinntteerraaccttiivvee
             Avoid prompting the user for input of any kind.  If a password is required for the _c_o_m_m_a_n_d
             to run, ssuuddoo will display an error message and exit.

     --PP, ----pprreesseerrvvee--ggrroouuppss
             Preserve the invoking user's group vector unaltered.  By default, the _s_u_d_o_e_r_s policy will
             initialize the group vector to the list of groups the target user is a member of.  The real
             and effective group-IDs, however, are still set to match the target user.

     --pp _p_r_o_m_p_t, ----pprroommpptt=_p_r_o_m_p_t
             Use a custom password prompt with optional escape sequences.  The following percent (‘%’)
             escape sequences are supported by the _s_u_d_o_e_r_s policy:

             %H  expanded to the host name including the domain name (only if the machine's host name is
                 fully qualified or the _f_q_d_n option is set in sudoers(5))

             %h  expanded to the local host name without the domain name

             %p  expanded to the name of the user whose password is being requested (respects the
                 _r_o_o_t_p_w, _t_a_r_g_e_t_p_w, and _r_u_n_a_s_p_w flags in sudoers(5))

             %U  expanded to the login name of the user the _c_o_m_m_a_n_d will be run as (defaults to root un‐
                 less the --uu option is also specified)

             %u  expanded to the invoking user's login name

             %%  two consecutive ‘%’ characters are collapsed into a single ‘%’ character

             The custom prompt will override the default prompt specified by either the security policy
             or the SUDO_PROMPT environment variable.  On systems that use PAM, the custom prompt will
             also override the prompt specified by a PAM module unless the _p_a_s_s_p_r_o_m_p_t___o_v_e_r_r_i_d_e flag is
             disabled in _s_u_d_o_e_r_s.

     --RR _d_i_r_e_c_t_o_r_y, ----cchhrroooott=_d_i_r_e_c_t_o_r_y
             Change to the specified root _d_i_r_e_c_t_o_r_y (see chroot(8)) before running the _c_o_m_m_a_n_d.  The se‐
             curity policy may return an error if the user does not have permission to specify the root
             directory.

     --rr _r_o_l_e, ----rroollee=_r_o_l_e
             Run the _c_o_m_m_a_n_d with an SELinux security context that includes the specified _r_o_l_e.

     --SS, ----ssttddiinn
             Write the prompt to the standard error and read the password from the standard input in‐
             stead of using the terminal device.

     --ss, ----sshheellll
             Run the shell specified by the SHELL environment variable if it is set or the shell speci‐
             fied by the invoking user's password database entry.  If a _c_o_m_m_a_n_d is specified, it is
             passed to the shell as a simple command using the --cc option.  The _c_o_m_m_a_n_d and any _a_r_gs are
             concatenated, separated by spaces, after escaping each character (including white space)
             with a backslash (‘\’) except for alphanumerics, underscores, hyphens, and dollar signs.
             If no _c_o_m_m_a_n_d is specified, an interactive shell is executed.  Most shells behave differ‐
             ently when a _c_o_m_m_a_n_d is specified as compared to an interactive session; consult the
             shell's manual for details.

     --tt _t_y_p_e, ----ttyyppee=_t_y_p_e
             Run the _c_o_m_m_a_n_d with an SELinux security context that includes the specified _t_y_p_e.  If no
             _t_y_p_e is specified, the default type is derived from the role.

     --UU _u_s_e_r, ----ootthheerr--uusseerr=_u_s_e_r
             Used in conjunction with the --ll option to list the privileges for _u_s_e_r instead of for the
             invoking user.  The security policy may restrict listing other users' privileges.  When us‐
             ing the _s_u_d_o_e_r_s policy, the --UU option is restricted to the root user and users with either
             the “list” priviege for the specified _u_s_e_r or the ability to run any _c_o_m_m_a_n_d as root or
             _u_s_e_r on the current host.

     --TT _t_i_m_e_o_u_t, ----ccoommmmaanndd--ttiimmeeoouutt=_t_i_m_e_o_u_t
             Used to set a timeout for the _c_o_m_m_a_n_d.  If the timeout expires before the _c_o_m_m_a_n_d has ex‐
             ited, the _c_o_m_m_a_n_d will be terminated.  The security policy may restrict the user's ability
             to set timeouts.  The _s_u_d_o_e_r_s policy requires that user-specified timeouts be explicitly
             enabled.

     --uu _u_s_e_r, ----uusseerr=_u_s_e_r
             Run the _c_o_m_m_a_n_d as a user other than the default target user (usually rroooott).  The _u_s_e_r may
             be either a user name or a numeric user-ID (UID) prefixed with the ‘#’ character (e.g.,
             ‘#0’ for UID 0).  When running _c_o_m_m_a_n_ds as a UID, many shells require that the ‘#’ be es‐
             caped with a backslash (‘\’).  Some security policies may restrict UIDs to those listed in
             the password database.  The _s_u_d_o_e_r_s policy allows UIDs that are not in the password data‐
             base as long as the _t_a_r_g_e_t_p_w option is not set.  Other security policies may not support
             this.

     --VV, ----vveerrssiioonn
             Print the ssuuddoo version string as well as the version string of any configured plugins.  If
             the invoking user is already root, the --VV option will display the options passed to config‐
             ure when ssuuddoo was built; plugins may display additional information such as default op‐
             tions.

     --vv, ----vvaalliiddaattee
             Update the user's cached credentials, authenticating the user if necessary.  For the
             _s_u_d_o_e_r_s plugin, this extends the ssuuddoo timeout for another 15 minutes by default, but does
             not run a _c_o_m_m_a_n_d.  Not all security policies support cached credentials.

     ----      The ---- is used to delimit the end of the ssuuddoo options.  Subsequent options are passed to
             the _c_o_m_m_a_n_d.

     Options that take a value may only be specified once unless otherwise indicated in the description.
     This is to help guard against problems caused by poorly written scripts that invoke ssuuddoo with user-
     controlled input.

     Environment variables to be set for the _c_o_m_m_a_n_d may also be passed as options to ssuuddoo in the form
     _V_A_R=_v_a_l_u_e, for example LD_LIBRARY_PATH=_/_u_s_r_/_l_o_c_a_l_/_p_k_g_/_l_i_b.  Environment variables may be subject to
     restrictions imposed by the security policy plugin.  The _s_u_d_o_e_r_s policy subjects environment vari‐
     ables passed as options to the same restrictions as existing environment variables with one impor‐
     tant difference.  If the _s_e_t_e_n_v option is set in _s_u_d_o_e_r_s, the _c_o_m_m_a_n_d to be run has the SETENV tag
     set or the _c_o_m_m_a_n_d matched is AALLLL, the user may set variables that would otherwise be forbidden.
     See sudoers(5) for more information.

CCOOMMMMAANNDD EEXXEECCUUTTIIOONN
     When ssuuddoo executes a _c_o_m_m_a_n_d, the security policy specifies the execution environment for the
     _c_o_m_m_a_n_d.  Typically, the real and effective user and group and IDs are set to match those of the
     target user, as specified in the password database, and the group vector is initialized based on
     the group database (unless the --PP option was specified).

     The following parameters may be specified by security policy:

     ••  real and effective user-ID

     ••  real and effective group-ID

     ••  supplementary group-IDs

     ••  the environment list

     ••  current working directory

     ••  file creation mode mask (umask)

     ••  SELinux role and type

     ••  scheduling priority (aka nice value)

   PPrroocceessss mmooddeell
     There are two distinct ways ssuuddoo can run a _c_o_m_m_a_n_d.

     If an I/O logging plugin is configured to log terminal I/O, or if the security policy explicitly
     requests it, a new pseudo-terminal (“pty”) is allocated and fork(2) is used to create a second ssuuddoo
     process, referred to as the _m_o_n_i_t_o_r.  The _m_o_n_i_t_o_r creates a new terminal session with itself as the
     leader and the pty as its controlling terminal, calls fork(2) again, sets up the execution environ‐
     ment as described above, and then uses the execve(2) system call to run the _c_o_m_m_a_n_d in the child
     process.  The _m_o_n_i_t_o_r exists to relay job control signals between the user's terminal and the pty
     the _c_o_m_m_a_n_d is being run in.  This makes it possible to suspend and resume the _c_o_m_m_a_n_d normally.
     Without the _m_o_n_i_t_o_r, the _c_o_m_m_a_n_d would be in what POSIX terms an “orphaned process group” and it
     would not receive any job control signals from the kernel.  When the _c_o_m_m_a_n_d exits or is terminated
     by a signal, the _m_o_n_i_t_o_r passes the _c_o_m_m_a_n_d's exit status to the main ssuuddoo process and exits.  Af‐
     ter receiving the _c_o_m_m_a_n_d's exit status, the main ssuuddoo process passes the _c_o_m_m_a_n_d's exit status to
     the security policy's close function, as well as the close function of any configured audit plugin,
     and exits.

     If no pty is used, ssuuddoo calls fork(2), sets up the execution environment as described above, and
     uses the execve(2) system call to run the _c_o_m_m_a_n_d in the child process.  The main ssuuddoo process
     waits until the _c_o_m_m_a_n_d has completed, then passes the _c_o_m_m_a_n_d's exit status to the security pol‐
     icy's close function, as well as the close function of any configured audit plugins, and exits.  As
     a special case, if the policy plugin does not define a close function, ssuuddoo will execute the
     _c_o_m_m_a_n_d directly instead of calling fork(2) first.  The _s_u_d_o_e_r_s policy plugin will only define a
     close function when I/O logging is enabled, a pty is required, an SELinux role is specified, the
     _c_o_m_m_a_n_d has an associated timeout, or the _p_a_m___s_e_s_s_i_o_n or _p_a_m___s_e_t_c_r_e_d options are enabled.  Both
     _p_a_m___s_e_s_s_i_o_n and _p_a_m___s_e_t_c_r_e_d are enabled by default on systems using PAM.

     On systems that use PAM, the security policy's close function is responsible for closing the PAM
     session.  It may also log the _c_o_m_m_a_n_d's exit status.

   SSiiggnnaall hhaannddlliinngg
     When the _c_o_m_m_a_n_d is run as a child of the ssuuddoo process, ssuuddoo will relay signals it receives to the
     _c_o_m_m_a_n_d.  The SIGINT and SIGQUIT signals are only relayed when the _c_o_m_m_a_n_d is being run in a new
     pty or when the signal was sent by a user process, not the kernel.  This prevents the _c_o_m_m_a_n_d from
     receiving SIGINT twice each time the user enters control-C.  Some signals, such as SIGSTOP and
     SIGKILL, cannot be caught and thus will not be relayed to the _c_o_m_m_a_n_d.  As a general rule, SIGTSTP
     should be used instead of SIGSTOP when you wish to suspend a _c_o_m_m_a_n_d being run by ssuuddoo.

     As a special case, ssuuddoo will not relay signals that were sent by the _c_o_m_m_a_n_d it is running.  This
     prevents the _c_o_m_m_a_n_d from accidentally killing itself.  On some systems, the reboot(8) utility
     sends SIGTERM to all non-system processes other than itself before rebooting the system.  This pre‐
     vents ssuuddoo from relaying the SIGTERM signal it received back to reboot(8), which might then exit
     before the system was actually rebooted, leaving it in a half-dead state similar to single user
     mode.  Note, however, that this check only applies to the _c_o_m_m_a_n_d run by ssuuddoo and not any other
     processes that the _c_o_m_m_a_n_d may create.  As a result, running a script that calls reboot(8) or
     shutdown(8) via ssuuddoo may cause the system to end up in this undefined state unless the reboot(8) or
     shutdown(8) are run using the eexxeecc() family of functions instead of ssyysstteemm() (which interposes a
     shell between the _c_o_m_m_a_n_d and the calling process).

   PPlluuggiinnss
     Plugins may be specified via _P_l_u_g_i_n directives in the sudo.conf(5) file.  They may be loaded as dy‐
     namic shared objects (on systems that support them), or compiled directly into the ssuuddoo binary.  If
     no sudo.conf(5) file is present, or if it doesn't contain any _P_l_u_g_i_n lines, ssuuddoo will use
     sudoers(5) for the policy, auditing, and I/O logging plugins.  See the sudo.conf(5) manual for de‐
     tails of the _/_e_t_c_/_s_u_d_o_._c_o_n_f file and the sudo_plugin(5) manual for more information about the ssuuddoo
     plugin architecture.

EEXXIITT VVAALLUUEE
     Upon successful execution of a _c_o_m_m_a_n_d, the exit status from ssuuddoo will be the exit status of the
     program that was executed.  If the _c_o_m_m_a_n_d terminated due to receipt of a signal, ssuuddoo will send
     itself the same signal that terminated the _c_o_m_m_a_n_d.

     If the --ll option was specified without a _c_o_m_m_a_n_d, ssuuddoo will exit with a value of 0 if the user is
     allowed to run ssuuddoo and they authenticated successfully (as required by the security policy).  If a
     _c_o_m_m_a_n_d is specified with the --ll option, the exit value will only be 0 if the _c_o_m_m_a_n_d is permitted
     by the security policy, otherwise it will be 1.

     If there is an authentication failure, a configuration/permission problem, or if the given _c_o_m_m_a_n_d
     cannot be executed, ssuuddoo exits with a value of 1.  In the latter case, the error string is printed
     to the standard error.  If ssuuddoo cannot stat(2) one or more entries in the user's PATH, an error is
     printed to the standard error.  (If the directory does not exist or if it is not really a direc‐
     tory, the entry is ignored and no error is printed.)  This should not happen under normal circum‐
     stances.  The most common reason for stat(2) to return “permission denied” is if you are running an
     automounter and one of the directories in your PATH is on a machine that is currently unreachable.

SSEECCUURRIITTYY NNOOTTEESS
     ssuuddoo tries to be safe when executing external _c_o_m_m_a_n_ds.

     To prevent command spoofing, ssuuddoo checks "." and "" (both denoting current directory) last when
     searching for a _c_o_m_m_a_n_d in the user's PATH (if one or both are in the PATH).  Depending on the se‐
     curity policy, the user's PATH environment variable may be modified, replaced, or passed unchanged
     to the program that ssuuddoo executes.

     Users should _n_e_v_e_r be granted ssuuddoo privileges to execute files that are writable by the user or
     that reside in a directory that is writable by the user.  If the user can modify or replace the
     _c_o_m_m_a_n_d there is no way to limit what additional _c_o_m_m_a_n_ds they can run.

     By default, ssuuddoo will only log the _c_o_m_m_a_n_d it explicitly runs.  If a user runs a _c_o_m_m_a_n_d such as
     ‘sudo su’ or ‘sudo sh’, subsequent _c_o_m_m_a_n_ds run from that shell are not subject to ssuuddoo's security
     policy.  The same is true for _c_o_m_m_a_n_ds that offer shell escapes (including most editors).  If I/O
     logging is enabled, subsequent _c_o_m_m_a_n_ds will have their input and/or output logged, but there will
     not be traditional logs for those _c_o_m_m_a_n_ds. Because of this, care must be